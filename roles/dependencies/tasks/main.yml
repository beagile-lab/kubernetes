---
- name: Set hostname for master node
  ansible.builtin.hostname:
    name: "{{ master_node }}"
  when: inventory_hostname == 'k8s-master-1'

- name: Set hostname for worker nodes
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  when: inventory_hostname in worker_nodes

- name: Update /etc/hosts for master node
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: "127.0.1.1.*"
    line: "127.0.1.1 {{ master_node }}"
  when: inventory_hostname == 'k8s-master-1'

- name: Disable SWAP (Kubeadm requirement)
  ansible.builtin.shell: |
    set -o pipefail
    if swapon --summary | grep -q 'partition'; then
      swapoff -a
    fi
  args:
    executable: /bin/bash
  changed_when: false

- name: Disable SWAP in fstab (Kubeadm requirement)
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: Ensure /etc/sysctl.d directory exists
  ansible.builtin.file:
    path: /etc/sysctl.d
    state: directory
    mode: '0755'

- name: Ensure k8s.conf file exists
  ansible.builtin.file:
    path: /etc/sysctl.d/k8s.conf
    state: touch
    mode: '0644'

- name: Ensure sysctl parameters for Kubernetes
  ansible.builtin.blockinfile:
    path: /etc/sysctl.d/k8s.conf
    block: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1

- name: Apply sysctl parameters
  ansible.builtin.command:
    cmd: sysctl --system
  changed_when: false

- name: Load br_netfilter module
  ansible.builtin.shell: modprobe br_netfilter
  args:
    executable: /bin/bash

- name: Add Docker's apt-key
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /etc/apt/keyrings/docker-apt-keyring.asc
    mode: '0644'
    force: true

- name: Add Docker's APT repository
  ansible.builtin.apt_repository:
    repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker-apt-keyring.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    update_cache: true

- name: Install Containerd
  ansible.builtin.apt:
    name: containerd.io
    state: present

- name: Configure Containerd
  ansible.builtin.copy:
    dest: /etc/containerd/config.toml
    content: |
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
        SystemdCgroup = true
    mode: '0644'

- name: Restart and enable Containerd
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    enabled: true

- name: Add Kubernetes GPG key
  ansible.builtin.shell: curl -fsSL {{ k8s_url_apt_key }} | gpg --dearmor -o {{ k8s_gpgpath }}
  args:
    creates: "{{ k8s_gpgpath }}"

- name: Add Kubernetes APT repository
  ansible.builtin.apt_repository:
    filename: kubernetes
    repo: "deb [signed-by={{ k8s_gpgpath }}] {{ k8s_repository }} /"

- name: Update apt package index
  ansible.builtin.apt:
    update_cache: true

- name: Install Kubernetes Packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
    force: yes
    install_recommends: no
  loop: "{{ k8s_packages }}"

- name: Enable and start Kubelet
  ansible.builtin.systemd:
    name: kubelet
    enabled: true
    state: started

- name: Pull required pause image
  ansible.builtin.command: crictl pull registry.k8s.io/pause:3.9
  become: true
  ignore_errors: true
